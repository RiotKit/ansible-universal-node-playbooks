version: org.riotkit.rkd/yaml/v1
imports: []
tasks:
    :node:setup:
        description: Sets up the inventory
        steps: |
            if [[ -d inventory ]]; then
                cd inventory; git pull; cd ..
            else
                git clone $INVENTORY_GIT_URL inventory
            fi

    :node:install-roles:
        description: Installs roles from Ansible Galaxy
        steps: |
            ansible-galaxy install --roles-path=roles/ -r ./requirements.yml

    :node:copy-host-defaults:
        description: "Copy default values for hosts in the inventory (warning: it will override existing files)"
        steps: cp -prv .templates/* ./

    :node:list:playbooks:
        description: List all available playbooks
        steps: |
            #!python
            import os
            for element in os.scandir('playbooks'):
                print(element.name)

            return True

    :node:clean:
        description: Clean up temporary files
        steps: "rm /tmp/.rkt-ansible.*.yaml"

    :node:deploy:
        description: Run a deployment
        arguments:
            "playbook":
                help: "Playbook name, see :list:playbooks"
            "--args":
                help: "Additional Ansible commandline arguments"
                required: False
            "--role":
                help: "Limit to a given role"
                required: False
            "--host":
                help: "Host name or group name"
                required: True
            "--vault":
                help: "Ask for vault passwords"
                action: store_true
        steps: |
            if [[ $ARG_ROLE ]]; then
                ARG_ARGS="$ARG_ARGS -t $ARG_ROLE"
            fi

            if [[ $ARG_VAULT ]]; then
                ARG_ARGS="$ARG_ARGS --ask-vault-pass"
            fi

            ansible-playbook ./playbooks/$ARG_PLAYBOOK -i inventory/hosts.cfg --limit=${ARG_HOST} ${ARG_ARGS}


    :node:encrypt-first-time:
        description: Perform a partial disk encryption on freshly installed OS
        arguments:
            "--args":
                help: "Additional Ansible commandline arguments"
                required: False
            "host":
                help: "Host name or group name"
        steps: ansible-playbook ./playbooks/encrypt-disks.yml --limit=$ARG_HOST -i inventory/hosts.cfg ${ARG_ARGS}

    :node:edit:host-config:
        description: Edit an encrypted host_var file
        arguments:
            "host":
                help: "Host name or group name"
        steps: |
            inventory_path=./inventory/host_vars/${ARG_HOST}.yaml

            if [[ ! -f "${inventory_path}" ]]; then
                echo " >> ${inventory_path} does not exist yet, creating - you will be prompted for password multiple times"
                touch "${inventory_path}"
                ansible-vault encrypt "${inventory_path}"

            elif [[ "$(cat $inventory_path)" != *"ANSIBLE_VAULT"* ]]; then
                echo " >> ${inventory_path} is not an encrypted file, encrypting - you will be prompted for password multiple times"
                ansible-vault encrypt "${inventory_path}"
            fi

            set -x;
            export EDITOR=${TEXT_EDITOR};
            ansible-vault edit "${inventory_path}"
            cd inventory && git add host_vars/${ARG_HOST}.yaml

    :node:edit:all-hosts-defaults-config:
        description: Edit a file that contains common values for all hosts
        steps: |
            inventory_path=./inventory/group_vars/all.yaml
            export EDITOR=${TEXT_EDITOR};

            if [[ ! -f "${inventory_path}" ]]; then
                %RKD% :node:copy-host-defaults
            fi

            if [[ "$(cat $inventory_path)" == *"ANSIBLE_VAULT"* ]]; then
                ansible-vault edit "${inventory_path}"
                exit 0
            fi

            ${EDITOR} "${inventory_path}"
